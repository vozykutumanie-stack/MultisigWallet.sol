// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title MultisigWallet — классический мультисиг (submit / confirm / revoke / execute)
/// @notice Подписанты (owners) совместно подтверждают транзакции; изменение состава — через транзакцию мультисиг.
import "openzeppelin-contracts/contracts/security/ReentrancyGuard.sol";
import "openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol";

contract MultisigWallet is ReentrancyGuard {
    using SafeERC20 for IERC20;

    /* ========== STATE ========== */
    address[] public owners;
    mapping(address => bool) public isOwner;
    uint256 public required; // минимальное количество подтверждений

    struct Tx {
        address to;
        uint256 value;
        bytes data;
        bool executed;
        uint256 numConfirmations;
    }

    Tx[] public transactions;
    // txId => owner => bool
    mapping(uint256 => mapping(address => bool)) public isConfirmed;

    /* ========== EVENTS ========== */
    event Deposit(address indexed sender, uint256 amount);
    event SubmitTransaction(address indexed owner, uint256 indexed txId, address indexed to, uint256 value, bytes data);
    event ConfirmTransaction(address indexed owner, uint256 indexed txId);
    event RevokeConfirmation(address indexed owner, uint256 indexed txId);
    event ExecuteTransaction(address indexed owner, uint256 indexed txId);
    event OwnerAdded(address indexed owner);
    event OwnerRemoved(address indexed owner);
    event RequirementChanged(uint256 required);

    /* ========== MODIFIERS ========== */
    modifier onlyOwner() {
        require(isOwner[msg.sender], "not owner");
        _;
    }

    modifier txExists(uint256 _txId) {
        require(_txId < transactions.length, "tx does not exist");
        _;
    }

    modifier notExecuted(uint256 _txId) {
        require(!transactions[_txId].executed, "tx already executed");
        _;
    }

    modifier notConfirmed(uint256 _txId) {
        require(!isConfirmed[_txId][msg.sender], "tx already confirmed");
        _;
    }

    constructor(address[] memory _owners, uint256 _required) {
        require(_owners.length > 0, "owners required");
        require(_required > 0 && _required <= _owners.length, "invalid required number");

        for (uint256 i = 0; i < _owners.length; i++) {
            address owner = _owners[i];
            require(owner != address(0), "owner zero");
            require(!isOwner[owner], "owner not unique");

            isOwner[owner] = true;
            owners.push(owner);
            emit OwnerAdded(owner);
        }
        required = _required;
        emit RequirementChanged(required);
    }

    /* ========== RECEIVE / FALLBACK ========== */
    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }

    fallback() external payable {
        if (msg.value > 0) {
            emit Deposit(msg.sender, msg.value);
        }
    }

    /* ========== OWNER ACTIONS ========== */

    /// @notice Создать транзакцию (токен/ETH/вызов контракта). Транзакция должна быть подтверждена required раз прежде чем execute.
    function submitTransaction(address _to, uint256 _value, bytes calldata _data) external onlyOwner {
        uint256 txId = transactions.length;
        transactions.push(Tx({
            to: _to,
            value: _value,
            data: _data,
            executed: false,
            numConfirmations: 0
        }));

        emit SubmitTransaction(msg.sender, txId, _to, _value, _data);
    }

    /// @notice Подтвердить транзакцию
    function confirmTransaction(uint256 _txId) external onlyOwner txExists(_txId) notExecuted(_txId) notConfirmed(_txId) {
        Tx storage transaction = transactions[_txId];
        transaction.numConfirmations += 1;
        isConfirmed[_txId][msg.sender] = true;

        emit ConfirmTransaction(msg.sender, _txId);
    }

    /// @notice Отозвать подтверждение
    function revokeConfirmation(uint256 _txId) external onlyOwner txExists(_txId) notExecuted(_txId) {
        require(isConfirmed[_txId][msg.sender], "not confirmed");
        Tx storage transaction = transactions[_txId];
        transaction.numConfirmations -= 1;
        isConfirmed[_txId][msg.sender] = false;

        emit RevokeConfirmation(msg.sender, _txId);
    }

    /// @notice Выполнить транзакцию, когда подтверждений >= required
    function executeTransaction(uint256 _txId) external nonReentrant onlyOwner txExists(_txId) notExecuted(_txId) {
        Tx storage transaction = transactions[_txId];
        require(transaction.numConfirmations >= required, "insufficient confirmations");

        transaction.executed = true;

        // call target
        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);
        require(success, "tx failed");

        emit ExecuteTransaction(msg.sender, _txId);
    }

    /* ========== VIEW HELPERS ========== */

    function getOwners() external view returns (address[] memory) {
        return owners;
    }

    function getTransactionCount() external view returns (uint256) {
        return transactions.length;
    }

    function getTransaction(uint256 _txId) external view returns (address to, uint256 value, bytes memory data, bool executed, uint256 numConfirmations) {
        Tx storage transaction = transactions[_txId];
        return (transaction.to, transaction.value, transaction.data, transaction.executed, transaction.numConfirmations);
    }

    /* ========== ADMINISTRATIVE (через мультисиг tx) ========== */
    // Для безопасности — эти функции internal и готовы вызываться только через multisig-транзакцию,
    // т.е. владельцы должны submit/confirm/execute транзакцию, вызывающую эти internal wrappers.

    function _addOwner(address _owner) external onlyOwner {
        // Чтобы изменить состав владельцев безопасно, владельцы должны отправить транзакцию:
        // multisig.submitTransaction(address(this), 0, abi.encodeWithSignature("_addOwner(address)", newOwner))
        // Однако чтобы исключить прямой вызов извне, можно позволить onlyOwner. Для ещё большей безопасности
        // можно сделать these functions internal and expose via executeTransaction only. Оставляю external+onlyOwner,
        // т.к. все изменения владельцев должны проходить мультисиг-процесс (submit->confirm->execute).
        require(_owner != address(0), "owner zero");
        require(!isOwner[_owner], "already owner");
        isOwner[_owner] = true;
        owners.push(_owner);
        emit OwnerAdded(_owner);
    }

    function _removeOwner(address _owner) external onlyOwner {
        require(isOwner[_owner], "not owner");

        // remove mapping
        isOwner[_owner] = false;

        // remove from array (swap & pop)
        for (uint256 i = 0; i < owners.length; i++) {
            if (owners[i] == _owner) {
                owners[i] = owners[owners.length - 1];
                owners.pop();
                break;
            }
        }

        // adjust required if necessary
        if (required > owners.length) {
            required = owners.length;
            emit RequirementChanged(required);
        }
        emit OwnerRemoved(_owner);
    }

    function _replaceOwner(address _oldOwner, address _newOwner) external onlyOwner {
        require(isOwner[_oldOwner], "old not owner");
        require(_newOwner != address(0), "new zero");
        require(!isOwner[_newOwner], "new already owner");

        // replace in array
        for (uint256 i = 0; i < owners.length; i++) {
            if (owners[i] == _oldOwner) {
                owners[i] = _newOwner;
                break;
            }
        }

        isOwner[_oldOwner] = false;
        isOwner[_newOwner] = true;

        emit OwnerRemoved(_oldOwner);
        emit OwnerAdded(_newOwner);
    }

    function _changeRequirement(uint256 _required) external onlyOwner {
        require(_required > 0 && _required <= owners.length, "invalid requirement");
        required = _required;
        emit RequirementChanged(required);
    }

    /* ========== TOKEN / ERC20 HELPERS ========== */

    /// @notice Владелец/мультисиг может отправлять ERC20 из кошелька (через обычную submit/confirm/execute вызов)
    /// Чтобы облегчить, добавим direct helper, который будет вызывать token.safeTransfer; invoke через executeTransaction.
    function _transferERC20(address token, address to, uint256 amount) external onlyOwner {
        IERC20(token).safeTransfer(to, amount);
    }
}
